services:
  # Test service (runs first)
  test:
    build: .
    command: ["pytest", "tests/"]
    environment:
      - DB_HOST=db
      - DB_USER=crypto_user
      - DB_PASSWORD=crypto_pass
      - DB_NAME=crypto_db
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy

  # Flask app (only starts if tests pass)
  app:
    build: .
    ports:
      - "5001:5000"
    environment:
      - DB_HOST=db
      - DB_USER=crypto_user
      - DB_PASSWORD=crypto_pass
      - DB_NAME=crypto_db
    depends_on:
      db:
        condition: service_healthy
      test:
        condition: service_completed_successfully  # Wait for tests to pass

  # PostgreSQL service
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: crypto_db
      POSTGRES_USER: crypto_user
      POSTGRES_PASSWORD: crypto_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_user -d crypto_db"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  postgres_data: